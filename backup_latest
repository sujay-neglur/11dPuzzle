Node init = new Node(board, null, Movement.Moves.ROOT, 0);
        ArrayList<Node> open = new ArrayList<>();
        ArrayList<Node> closed = new ArrayList<>();
        open.add(init);
        int count = 0;
        while (!open.isEmpty()) {
            //Print the queue
//            for (Node n : open) {
//                System.out.print((n.heuristic + n.depth) + " " + n.move + " ");
//            }
//            System.out.println();
//            System.out.println(open.size());
            Node temp = open.remove(0);
            closed.add(temp);
//            if(temp.depth>10) break;
            Utility.printMatrix(temp.board, temp.move, temp.heuristic + temp.depth, temp.parent);
            if (Utility.checkGoalState(temp)) {
//                for(Node temp1= temp;temp1!=null;temp1=temp1.parent){
//                    Utility.printMatrix(temp1.board,temp1.move,temp1.heuristic+temp1.depth,temp1.parent);
//                }
                Utility.print(temp);
                break;
            }
            ArrayList<Node> children = Utility.generateChildren(temp, new ArrayList<>(closed));
            for (Node child : children) {
                if (child != null) {
                    if(Utility.isVisited(closed,child.board)) continue;

                    if (heuristicToUse == Heuristics.HeuristicToUse.MANHATTAN)
                        child.heuristic = Heuristics.manhattanDistance(child.board);
                    if (heuristicToUse == Heuristics.HeuristicToUse.MISPLACEDTILES)
                        child.heuristic = Heuristics.misplacedTiles(child.board);
                    if (heuristicToUse == Heuristics.HeuristicToUse.SUMINVERSION)
                        child.heuristic = Heuristics.sumInversion(child.board);

                    int blankIndexInChild=Utility.getIndex(child.board,0);
//                    int blankIndexInTarget=Utility.getIndex(BoardConfig.goal,0);
                    int blankIndexInRoot= Utility.getIndex(init.board,0);
                    int currentRow= blankIndexInChild/BoardConfig.columns;
                    int currentColumn=blankIndexInChild%BoardConfig.columns;
                    int rootRow=blankIndexInRoot/BoardConfig.columns;
                    int rootColumn= blankIndexInRoot%BoardConfig.columns;
                    child.depth=  ((currentColumn-rootColumn)*(currentColumn-rootColumn) + (currentRow-rootRow) * (currentRow-rootRow)) * 1.4;

                    if(!Utility.isVisited(open,child.board)){
                        open.add(child);
                    }
                    else{
                        Node index=getIndexOfNode(child,open);
                        if(child.depth+child.heuristic< index.depth+index.heuristic ){
                            open.remove(index);
                            open.add(child);
                        }
                    }
                }
                open = Utility.sortSet(open, new Utility());
                count++;